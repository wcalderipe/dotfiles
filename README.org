#+setupfile: ~/dev/dotfiles/setup.org
#+options: toc:2

* dotfiles

[[https://github.com/wcalderipe/dotfiles/workflows/CI/badge.svg]]

A continouos working in progress of my workstation personal configurations.

[[resources/macos-screenshot-emacs.png]]

See also a [[./resources/linux-screenshot-emacs.png][Linux screenshot]].

* Install

   I'm using Ansible to manage system dependencies and configuration
   orchestration.

** macOS

    You first need to install Homebrew by following the instructions from their
    [[https://brew.sh/][official website]].

    #+begin_src shell
      # Install Xcode Command Line Tools
      xcode-select --install

      # Install git and ansible
      brew install git ansible

      # To install everything from scratch.
      ansible-playbook \
          --inventory ./ansible/hosts \
          ./ansible/macos.yml
    #+end_src

    See [[./ansible/macos.yml][ansible/macos.yml]] for the full list tags.

** Linux

    ⚠️  I have been using macOS lately. Keep in mind a few things may be out of
    date on Linux.

    #+begin_src shell
      # Before start, install the minimal dependencies.
      sudo apt-get install git ansible --quiet --yes

      # To install everything from scratch.
      ansible-playbook \
          --inventory ./ansible/hosts \
          ./ansible/linux.yml

      # You can also filter or skip by tags.
      ansible-playbook \
          --inventory ./ansible/hosts \
          --tags "emacs" \
          --skip-tags "deps" \
          ./ansible/linux.yml

      # To install in a Docker container, skip apps, gnome and keyboard tags.
      ansible-playbook \
          --inventory ./ansible/hosts \
          --skip-tags "apps,gnome,keyboard" \
          ./ansible/linux.yml
    #+end_src

    See [[ansible/linux.yml]] for the full list tags.

** Docker

    #+begin_src shell
      docker build --tag dotfiles .

      docker run -it \
             --volume ~/dev/dotfiles/ansible:/home/tester/dev/dotfiles/ansible \
             dotfiles

      docker run dotfiles \
             ansible-playbook \
             --inventory ./ansible/hosts \
             --skip-tags "apps,gnome,keyboard" \
             ./ansible/linux.yml
    #+end_src

    Unfortunately, a container has its limitations. It will only work for the
    Linux dotfiles. Moreover, it won't cover software that depends on GUI like
    Emacs (outside the terminal) and GNOME.

* Manual steps

** iTerm theme (macOS)

   1. Launch iTerm.
   1. Open the preferences by typing =CMD-i=.
   1. Go to the =Colors= tab.
   1. Click on =Load Presets=.
   1. Click on =Import=.
   1. Select the =.itermcolors= file from the =iterm= folder in this dotfiles.

   For more iTerm themes see [[https://iterm2colorschemes.com/][iterm2-color-schemes]].

** Change =capslock= to control (macOS)

   1. Launch System Preferences.
   1. Go to =Keyboard=.
   1. Click on =Modifier Keys...=.
   1. Change =Caps Lock= to =^ Control=.

   Make sure to do the same for the external keyboard if you have one.

** Change 🌐 key to show Emoji & Symbols (macOS)

  1. Launch System Preferences.
  1. Go to =Keyboard=.
  1. Click on =Input Sources=.
  1. Change "Press 🌐 key to" to "Show Emoji & Symbols"

** jEnv (macOS)

  Add the installed OpenJDK to jEnv.

  #+begin_src shell
    # This is an example. Check where the JDK was installed on your machine. 
    jenv add /opt/homebrew/opt/java/libexec/openjdk.jdk/Contents/Home/
  #+end_src

  Add a global version.

  #+begin_src shell
    jenv global 20.0.1 
  #+end_src

** Display settings (macOS)

  1. Launch System Preferences.
  1. Go to =Displays=.
  1. Change =Resolution= to =Scaled=.
  1. Change =More Space=.

  To prevent external monitor flickering issues:

  1. Go to =Displays > Display Settings=.
  1. Change the external monitor's color profile to =Color LCD=.
  1. Change the external monitor's refresh rate to =60 Hz=.
  1. Turn off =Auto Adjust Brightness=, =True Tone=, and =Night Shift=.

** GitHub

  Generate a new SSH key (you can follow the GitHub's official steps
  [[https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent][here]]).

  1. Copy the SSH key to the clipboard.
  1. Go to GitHub settings.
  1. Go to SSH and GPG keys.
  1. Click on =New SSH key=.
  1. Paste the key and save.

  For the GPG key, you can follow the GitHub's official steps
  [[https://docs.github.com/en/authentication/managing-commit-signature-verification/generating-a-new-gpg-key][here]].

  [[https://docs.github.com/en/authentication/managing-commit-signature-verification/telling-git-about-your-signing-key][Tell Git to automatically sign all commits.]]

  #+begin_src shell
    # Set your signing key
    git config --global user.signingkey <YOUR_GPG_KEY_ID>

    # Tell Git to automatically sign all commits.
    git config --global commit.gpgsign true
  #+end_src

* Uninstall

   #+begin_src shell
     # Remove all links created in your home directory.
     $DOTFILES_DIR/shell/clean.sh
   #+end_src

* Emacs

** Key Binding

    My key bindings are defined using [[https://github.com/noctuid/general.el#about][general.el]] within [[https://github.com/jwiegley/use-package][use-package]] scattered in
    =lisp/my-*= files. So, if you want to check them all do =M-x
    general-describe-keybindings=.

** Emacs Tabs

    I normally have multiple projects open at the same time in Emacs and I like
    to have them separated by workspace. For that, I have been using [[https://depp.brause.cc/eyebrowse/][eyebrowse]]
    with [[https://github.com/abo-abo/hydra][hydra]].

    Hit =C-c + t= to see the menu.

* Org

** Styled HTML exports

    I often share thoughts and ideas with other people in my daily basis. For
    that I like to export my Org notes to HTML and then PDF. Thus, I created a
    minimal stylesheet that mimics GitHub's Markdown styles for the features I
    use most in Org. See [[resources/org.css][org.css]].

    Add the snippet below to include the styles in a Org file.

    #+begin_src org
      ,#+OPTIONS: html-style:nil html-postamble:nil num:nil
      ,#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="__REPLACE_ME_WITH REAL_LINK__"/>
    #+end_src

*** TODO Find a proper place to host the org.css file

     GitHub pages might be a good candidate.

** TODO Fix export to HTML without a theme

    See =setup.org= and =org.css=.:

* Cheat Sheet

** PDF Operations

    To convert HTML to PDF I use [[https://wkhtmltopdf.org/][wkhtmltopdf]].

    #+begin_src shell
      wkhtmltopdf SOURCE.html TARGET.pdf
    #+end_src

** Kill process by port

    I often have ghost processes started from within Emacs but never properly
    terminated blocking ports. The command below help me to kill a process by its
    port number.

    #+begin_src shell
      kill -9 $(lsof -i tcp:3000 -t)
    #+end_src

* References

   - [[https://github.com/bbatsov/emacs-lisp-style-guide][bbatsov/emacs-lisp-style-guide: A community-driven Emacs Lisp style]]
