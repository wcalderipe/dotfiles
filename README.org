#+setupfile: ~/dev/dotfiles/setup.org

* dotfiles

[[https://github.com/wcalderipe/dotfiles/workflows/CI/badge.svg]]

A continouos working in progress of my workstation personal configurations.

[[resources/macos-screenshot-emacs.png]]

See also a [[./resources/linux-screenshot-emacs.png][Linux screenshot]].

** Installation

   I'm using Ansible to manage system dependencies and configuration
   orchestration.

*** macOS

    You first need to install Homebrew by following the instructions from their
    [[https://brew.sh/][official website]].

    #+begin_src shell
      # Install Xcode Command Line Tools
      xcode-select --install

      # Install git and ansible
      brew install git ansible

      # To install everything from scratch.
      ansible-playbook \
          --inventory ./ansible/hosts \
          ./ansible/macos.yml
    #+end_src

    See [[./ansible/macos.yml][ansible/macos.yml]] for the full list tags.

*** Linux

    ⚠️  I have been using macOS lately. Keep in mind a few things may be out of
    date on Linux.

    #+begin_src shell
      # Before start, install the minimal dependencies.
      sudo apt-get install git ansible --quiet --yes

      # To install everything from scratch.
      ansible-playbook \
          --inventory ./ansible/hosts \
          ./ansible/linux.yml

      # You can also filter or skip by tags.
      ansible-playbook \
          --inventory ./ansible/hosts \
          --tags "emacs" \
          --skip-tags "deps" \
          ./ansible/linux.yml

      # To install in a Docker container, skip apps, gnome and keyboard tags.
      ansible-playbook \
          --inventory ./ansible/hosts \
          --skip-tags "apps,gnome,keyboard" \
          ./ansible/linux.yml
    #+end_src

    See [[ansible/linux.yml]] for the full list tags.

*** Docker

    #+begin_src shell
      docker build --tag dotfiles .

      docker run -it \
             --volume ~/dev/dotfiles/ansible:/home/tester/dev/dotfiles/ansible \
             dotfiles

      docker run dotfiles \
             ansible-playbook \
             --inventory ./ansible/hosts \
             --skip-tags "apps,gnome,keyboard" \
             ./ansible/linux.yml
    #+end_src

    Unfortunately, a container has its limitations. It will only work for the
    Linux dotfiles. Moreover, it won't cover software that depends on GUI like
    Emacs (outside the terminal) and GNOME.

** Rationale

*** Everything must have a purpose

    If I don't know why it's there, it will remove it. I usually tend to forget
    things in the long run, so documentation here will be the key.

*** Isolation

    Everything must be self-contained. I want to add and remove configurations
    or software without a hassle - like the headache of hunting scattered files
    and scripts in the codebase.

*** Testability

    I like to run my dotfiles in an isolated Docker container from time-to-time,
    so I can safely test new configurations outside of my daily
    workstation. This practice gives me a minimal level of confidence that I
    won't blow my whole local environment on a Monday morning because I was
    willing to test new software in my stack.

    The driver that justifies this effort is continuous improvement on my workflow.

*** Automation

   After push a button, it must have zero human interaction until
   everything is done.


** Emacs

*** Key Binding

    My key bindings are defined using [[https://github.com/noctuid/general.el#about][general.el]] within [[https://github.com/jwiegley/use-package][use-package]] scattered in
    =lisp/my-*= files. So, if you want to check them all do =M-x
    general-describe-keybindings=.

*** Emacs Tabs

    I normally have multiple projects open at the same time in Emacs and I like
    to have them separated by workspace. For that, I have been using [[https://depp.brause.cc/eyebrowse/][eyebrowse]]
    with [[https://github.com/abo-abo/hydra][hydra]].

    Hit =C-c + t= to see the menu.

** Org

*** Styled HTML exports

    I often share thoughts and ideas with other people in my daily basis. For
    that I like to export my Org notes to HTML and then PDF. Thus, I created a
    minimal stylesheet that mimics GitHub's Markdown styles for the features I
    use most in Org. See [[resources/org.css][org.css]].

    Add the snippet below to include the styles in a Org file.

    #+begin_src org
      ,#+OPTIONS: html-style:nil html-postamble:nil num:nil
      ,#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="__REPLACE_ME_WITH REAL_LINK__"/>
    #+end_src

**** TODO Find a proper place to host the org.css file

     GitHub pages might be a good candidate.

** Cheat Sheet

*** PDF Operations

    To convert HTML to PDF I use [[https://wkhtmltopdf.org/][wkhtmltopdf]].

    #+begin_src shell
      wkhtmltopdf SOURCE.html TARGET.pdf
    #+end_src

*** Kill process by port

    I often have ghost processes started from within Emacs but never properly
    terminated blocking ports. The command below help me to kill a process by its
    port number.

    #+begin_src shell
      kill -9 $(lsof -i tcp:3000 -t)
    #+end_src

** References

   - [[https://github.com/bbatsov/emacs-lisp-style-guide][bbatsov/emacs-lisp-style-guide: A community-driven Emacs Lisp style]]

** Tasks

*** TODO org-roam and org-protocol to easy open files from the graph view

    https://www.orgroam.com/manual/Installation-_00281_0029.html#Installation-_00281_0029

** macOS

*** defaults cheat sheet

    #+begin_quote
      macOS applications and other programs use the defaults system to record
      user preferences and other information to be maintained when the
      application isn't running (font for new documents, or the position of an
      Info panel).
    #+end_quote

    See also https://macos-defaults.com

    #+begin_src shell
      # Boolean
      defaults write -g ApplePressAndHoldEnabled -bool false
      # Integer
      defaults write -g InitialKeyRepeat -int 15
      # Keys that belong to a domain
      defaults read com.apple.Accessibility KeyRepeatDelay
      # Get key type
      defaults read-type com.apple.Accessibility KeyRepeatDelay
    #+end_src

    *Note* you'll need to log-out and log back in to apply the changes.

*** Tmux

    I have removed Tmux because it was causing errors with Emacs'
    =exec-path-from-shell= package.

    #+begin_src yaml
      # ansible/roles/macos/tasks/iterm2.yml
      - name: Install tmux
        homebrew:
          name: tmux
        tags: [ iterm2 ]

      - name: install tpm
        git:
          repo: https://github.com/tmux-plugins/tpm.git
          dest: "{{ lookup('env', 'HOME') }}/.tmux/plugins/tpm"
        tags: [ iterm2 ]

      - name: Create .tmux.conf link
        file:
          src: "{{ lookup('env', 'DOTFILES_DIR') }}/.tmux.conf"
          dest: "{{ lookup('env', 'HOME') }}/.tmux.conf"
          state: link
          force: yes
        tags: [ iterm2 ]
    #+end_src

*** TODO Automate iTerm2 theme download and installation

    See https://iterm2colorschemes.com/

*** TODO Add VSCode CLI

    #+begin_src shell
      # This is suppose to work
      export PATH="/Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin:$PATH"
    #+end_src
