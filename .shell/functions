#! /usr/bin/env bash

log () {
  local text=$1
  echo "[INFO] ${text}"
}

my-gnome-setup () {
  log "Setup gnome preferences"

  # Modify capslock to be ctrl. Also, set compose key to print screen in order
  # to write special characters in a US keyboard (requires gnome-tweak-tool)
  gsettings set org.gnome.desktop.input-sources xkb-options "['ctrl:nocaps', 'compose:ralt']"

  gsettings set org.gnome.desktop.peripherals.keyboard delay 200
  gsettings set org.gnome.desktop.peripherals.keyboard repeat-interval 30

  gsettings set org.gnome.desktop.interface gtk-theme Adwaita-dark
  gsettings set org.gnome.desktop.interface show-battery-percentage true
  gsettings set org.gnome.desktop.interface clock-format 12h
  gsettings set org.gnome.desktop.interface clock-show-weekday true
  gsettings set org.gnome.desktop.interface clock-show-date true

  gsettings set org.gnome.shell.extensions.dash-to-dock dock-position BOTTOM
  gsettings set org.gnome.shell.extensions.dash-to-dock dash-max-icon-size 32
  gsettings set org.gnome.shell.extensions.dash-to-dock autohide true
}

setup-gnome-terminal-base16-solarized-profile () {
  git clone https://github.com/chriskempson/base16-gnome-terminal.git /tmp/base16-gnome-terminal
  source /tmp/base16-gnome-terminal/base16-solarized.dark.sh
}

clone-dotfiles () {
  if [[ ! -d "$HOME/dev/dotfiles" ]]; then
    mkdir -p $HOME/dev
    git clone git@github.com:ilmotta/dotfiles.git $HOME/dev/dotfiles
  else
    log "dotfiles repository already cloned."
  fi
}

create-symlinks-to-dotfiles () {
  local dotfiles_path=$HOME/dev/dotfiles

  ln -sf $dotfiles_path/.vim        $HOME
  ln -sf $dotfiles_path/.vimrc      $HOME
  ln -sf $dotfiles_path/.emacs.d    $HOME
  ln -sf $dotfiles_path/.lein	    $HOME
  ln -sf $dotfiles_path/.shell      $HOME
  ln -sf $dotfiles_path/.vscode     $HOME
  ln -sf $dotfiles_path/.zshrc      $HOME
  ln -sf $dotfiles_path/.zpreztorc  $HOME
  ln -sf $dotfiles_path/.gitconfig  $HOME
  ln -sf $dotfiles_path/.gitignore  $HOME
  ln -sf $dotfiles_path/.tmux.conf  $HOME
}

install-basic-dependencies () {
  sudo apt update
  sudo apt install --yes \
    build-essential \
    git \
    curl \
    xclip \
    htop \
    exuberant-ctags \
    libreadline-dev \
    libssl-dev \
    openjdk-8-jdk \
    silversearcher-ag \
    tig \
    zsh \
    vim-gnome \
    tmux \
    gopass \
    nodejs \
    gnome-tweak-tool \
    jq \
    wordnet \ # Required by synosaurus emcas package
}

# After installation, log out and log in for the group changes to take effect.
install-docker () {
  which docker &> /dev/null
  if [[ $? != 0 ]]; then
    sudo apt-key adv \
      --keyserver hkp://ha.pool.sks-keyservers.net:80 \
      --recv-keys 58118E89F3A912897C070ADBF76221572C52609D

    echo "deb https://apt.dockerproject.org/repo ubuntu-xenial main" \
      | sudo tee /etc/apt/sources.list.d/docker.list

    sudo apt install --yes \
      linux-image-extra-$(uname -r) linux-image-extra-virtual \
      apt-transport-https ca-certificates

    sudo apt install --yes docker-engine docker-compose
    sudo gpasswd -a ${USER} docker
  else
    log "docker already installed."
  fi
}

install-docker-compose () {
  which docker-compose &> /dev/null
  if [[ $? != 0 ]]; then
    sudo curl \
      -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-`uname -s`-`uname -m` \
      -o /usr/local/bin/docker-compose

    sudo chmod +x /usr/local/bin/docker-compose
  else
    log "docker-compose already installed."
  fi
}

install-nvm () {
  which nvm &> /dev/null
  if [[ $? != 0 ]]; then
    git clone https://github.com/creationix/nvm.git $HOME/.nvm
  else
    log "nvm already installed."
  fi
}

install-npm () {
  which npm &> /dev/null
  if [[ $? != 0 ]]; then
    sudo apt install --yes npm
  else
    log "npm already installed."
  fi
}

install-yarn () {
  which yarn &> /dev/null
  if [[ $? != 0 ]]; then
    curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
    echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
    sudo apt update && sudo apt install --yes yarn
  else
    log "yarn already installed."
  fi
}

install-google-chrome () {
  which google-chrome &> /dev/null
  if [[ $? != 0 ]]; then
    wget --output-document /tmp/google-chrome.deb \
      https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb \
      && sudo dpkg --install /tmp/google-chrome.deb
  else
    log "google-chrome already installed."
  fi
}

install-ripgrep () {
  which rg &> /dev/null
  if [[ $? != 0 ]]; then
    wget --output-document /tmp/ripgrep.deb \
      https://github.com/BurntSushi/ripgrep/releases/download/0.10.0/ripgrep_0.10.0_amd64.deb \
      && sudo dpkg --install /tmp/ripgrep.deb
  else
    log "ripgrep already installed."
  fi
}

install-gnome-terminal-zenburn-color () {
  sudo apt install dconf-cli

  if [[ ! -e "/tmp/gnome-terminal-colors" ]]; then
    git clone https://github.com/gnumoksha/gnome-terminal-colors.git /tmp/gnome-terminal-colors
  fi

  CURRENT_PROFILE=$(gsettings get org.gnome.Terminal.ProfilesList default | tr -d \')

  /tmp/gnome-terminal-colors/install.sh \
    --profile $(echo $CURRENT_PROFILE) \
    --scheme zenburn \
    --skip-dircolors
}

install-emacs () {
  which emacs &> /dev/null
  if [[ $? != 0 ]]; then
    local version=emacs-26.1
    sudo apt-get install --yes \
      build-essential \
      libdbus-1-dev \
      libncurses-dev \
      libgnutls30 \
      libgnutls28-dev \
      gnutls-bin \
      texinfo

    cd /tmp
    wget -nc --no-check-certificate https://ftp.gnu.org/gnu/emacs/$version.tar.gz
    tar -xzvf $version.tar.gz
    cd $version
    ./configure --without-x --prefix=$HOME/.local
    make && make install
  else
    log "emacs already installed."
  fi
}

install-clojure-lein () {
  which lein &> /dev/null
  if [[ $? != 0 ]]; then
    local url=https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
    local lein_path=$HOME/.local/bin/lein
    mkdir -p $HOME/.local/bin

    curl $url --output $lein_path \
      && chmod +x $lein_path \
      && lein -v
  else
    log "lein already installed."
  fi
}

install-snapcraft () {
  which snap &> /dev/null
  if [[ $? != 0 ]]; then
    sudo add-apt-repository ppa:snappy-dev/tools
    sudo apt update
    sudo apt install --yes snapcraft
  else
    log "snapcraft already installed."
  fi
}

install-zoom () {
  which zoom &> /dev/null
  if [[ $? != 0 ]]; then
    local package_name=zoom_amd64.deb
    local url=https://zoom.us/client/latest/$package_name
    cd /tmp
    wget $url
    sudo apt install -y libxcb-xtest0
    sudo dpkg -i $package_name
    sudo apt-get -f install
    rm -f $package_name
  else
    log "zoom already installed."
  fi
}

install-java-mvn () {
  which mvn &> /dev/null
  if [[ $? != 0 ]]; then
    local version=3.3.9
    local filename=apache-maven-${version}
    local output_path=$HOME/$filename.tar.gz
    local unzip_path=$HOME/$filename

    wget --output-document $output_path \
      http://www-eu.apache.org/dist/maven/maven-3/${version}/binaries/apache-maven-${version}-bin.tar.gz
    tar -xzvf $output_path
    mv $unzip_path $HOME/maven
    rm $output_path
  else
    log "mvn already installed."
  fi
}

# TODO: Install jenv + java 8 and 11
install-jenv () {
    which jenv &> /dev/null
 git clone https://github.com/jenv/jenv.git ~/.jenv
}

install-fzf () {
  which fzf &> /dev/null
  if [[ $? != 0 ]]; then
    git clone --depth 1 https://github.com/junegunn/fzf.git $HOME/.fzf
    $HOME/.fzf/install
  else
    log "fzf already installed."
  fi
}

install-tmux-tpm () {
  if [[ ! -d "$HOME/.tmux" ]]; then
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
  else
    log "tpm already installed."
  fi
}

install-vim-plug () {
  if [[ ! -f "$HOME/.vim/autoload/plug.vim" ]]; then
    curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
      https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  else
    log "vim-plug already installed."
  fi
}

install-zprezto () {
  if [[ ! -d "$HOME/.zprezto" ]]; then
    git clone --recursive https://github.com/sorin-ionescu/prezto.git $HOME/.zprezto
  else
    log "zprezto already installed."
  fi
}

install-rbenv () {
  if [[ ! -d "$HOME/.rbenv" ]]; then
    sudo apt install --yes zlib1g-dev

    git clone https://github.com/rbenv/rbenv.git ~/.rbenv

    # Add ruby-build to simplify the installation of new ruby versions using
    # `rbenv install`
    git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
  else
    log "rbenv already installed."
  fi
}

# TODO: Check if boostnote is already installed
# TODO: Add to install-everything
install-boostnote () {
  wget --output-document /tmp/boostnote.deb \
    https://github.com/BoostIO/boost-releases/releases/download/v0.11.15/boostnote_0.11.15_amd64.deb \
    && sudo dpkg --install /tmp/boostnote.deb
}

install-applications () {
  which snap &> /dev/null
  if [[ $? != 0 ]]; then
    log "snapcraft is required."
  else
    sudo snap install spotify
    sudo snap install slack --classic
    sudo snap install telegram-desktop
    sudo snap install postman
  fi
}

install-everything () {
  install-basic-dependencies
  install-tmux-tpm
  install-vim-plug
  install-zprezto
  install-rbenv
  install-java-mvn
  install-docker
  install-docker-compose
  install-nvm
  install-npm
  install-yarn
  install-google-chrome
  install-ripgrep
  install-emacs
  install-zoom
  install-fzf
  install-clojure-lein
  install-snapcraft
  install-gnome-terminal-zenburn-color
  install-applications
}
